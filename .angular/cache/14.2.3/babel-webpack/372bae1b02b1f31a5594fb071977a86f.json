{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartServiceService = /*#__PURE__*/(() => {\n  class CartServiceService {\n    constructor() {\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n      this.cartItems = [];\n      this.totalPrice = new BehaviorSubject(0);\n      this.totalQuantity = new BehaviorSubject(0);\n    }\n\n    addToCart(theCartItem) {\n      let alreadyInCart = false;\n      let existingCartItem = undefined; //Find ticket\n\n      if (this.cartItems.length > 0) {\n        for (let tempCartItem of this.cartItems) {\n          if (tempCartItem.id === theCartItem.id) {\n            existingCartItem = tempCartItem;\n            break;\n          }\n        } //Check if tickets already exists\n\n\n        alreadyInCart = existingCartItem != undefined;\n      }\n\n      if (alreadyInCart) {\n        // Increase tickets\n        existingCartItem.quantity++;\n      } else {\n        this.cartItems.push(theCartItem);\n      } // Calculate total price and ticket quantity\n\n\n      this.computeCartTotals();\n    }\n\n    decrementQuantity(theCartItem) {\n      theCartItem.quantity--;\n\n      if (theCartItem.quantity === 0) {\n        this.deleteFromCart(theCartItem);\n      } else {\n        this.computeCartTotals();\n      }\n    }\n\n    deleteFromCart(theCartItem) {\n      // Find ticket index\n      const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id === theCartItem.id); // If ticket is found, erase from index\n\n      if (itemIndex > -1) {\n        this.cartItems.splice(itemIndex, 1);\n        this.computeCartTotals();\n      }\n    }\n\n    computeCartTotals() {\n      let totalPriceValue = 0;\n      let totalQuantityValue = 0;\n\n      for (let currentCartItem of this.cartItems) {\n        totalPriceValue += currentCartItem.quantity * currentCartItem.ticket_price;\n        totalQuantityValue += currentCartItem.quantity;\n      } // New values\n\n\n      this.totalPrice.next(totalPriceValue);\n      this.totalQuantity.next(totalQuantityValue);\n      this.logCartData(totalPriceValue, totalQuantityValue);\n    }\n\n    logCartData(totalPriceValue, totalQuantityValue) {\n      console.log('Contents of the cart');\n\n      for (let tempCartItem of this.cartItems) {\n        const subTotalPrice = tempCartItem.quantity * tempCartItem.ticket_price;\n        console.log(`name: ${tempCartItem.title}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.ticket_price}, subTotalPrice=${subTotalPrice}`);\n      }\n\n      console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n      console.log('----');\n    }\n\n  }\n\n  CartServiceService.ɵfac = function CartServiceService_Factory(t) {\n    return new (t || CartServiceService)();\n  };\n\n  CartServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartServiceService,\n    factory: CartServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}