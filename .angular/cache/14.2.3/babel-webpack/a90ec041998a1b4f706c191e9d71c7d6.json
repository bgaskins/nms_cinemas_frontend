{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataServiceService = /*#__PURE__*/(() => {\n  class DataServiceService {\n    //inject the DI\n    constructor(http) {\n      this.http = http;\n      this.url = \"http://localhost:8080/api/user/\";\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n    } //get all users\n\n\n    getAllUsers() {\n      console.log('getAllUsers ' + this.url + 'all');\n      return this.http.get(this.url + 'all');\n    } //post\n\n\n    createUser(user) {\n      const headers = {\n        'content-type': 'application/json'\n      };\n      const body = JSON.stringify(user);\n      console.log(body);\n      return this.http.post(this.url + 'newuser', body, {\n        'headers': headers\n      });\n    } //update user\n\n\n    updateUser(data) {\n      return this.http.put(this.url, data).pipe(catchError(this.handleError));\n    } //delete user by id\n\n\n    deleteUser(id) {\n      let endPoints = id;\n      this.http.delete(this.url + endPoints).subscribe(any => {\n        return this.getAllUsers();\n      });\n    } // Handle API errors\n\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred:', error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  DataServiceService.ɵfac = function DataServiceService_Factory(t) {\n    return new (t || DataServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataServiceService,\n    factory: DataServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}